table(data)
summary(data$race)
table(data$race)
levels(data$discharge_disposition_id)
summary(data$discharge_disposition_id)
table(data$discharge_disposition_id)
library(tidyverse)
rm(list = ls())
data <- read.csv("diabetes.csv")
# Keep one record for each patient
data <- data[!duplicated(data["patient_nbr"]),]
# Exclude variables as required
data <- data %>%
dplyr::select(-c(encounter_id,admission_source_id,payer_code,encounter_num))
# Predictor Reconstruction
data <- data %>%
dplyr::select(-c(X, # Index
weight, # Missing too many observations
examide, # monotonic values
citoglipton, # monotonic values
max_glu_serum, # None for most of the data
admission_type_id, # Source type varaible
medical_specialty, # Missing too many observations
))
# Medications, Procedures and Visits
data <- data %>%
mutate(num_medications = rowSums(.[15:35] != "No")) %>%
mutate(num_procedures = num_procedures + num_lab_procedures) %>%
mutate(num_visits = number_inpatient + number_outpatient + number_emergency)
data <- data[-c(15:35)]
data <- data %>%
dplyr::select(-c(num_lab_procedures,
number_inpatient,
number_outpatient,
number_emergency))
# Gender
data <- subset(data, gender != "Unknown/Invalid")
data$gender <- factor(data$gender)
# Race
data$race <- ifelse(data$race == "Caucasian", "Caucasian", "Other")
data$race <- factor(data$race)
data <- data[complete.cases(data$race),]
# Age
data <- data %>%
mutate(age = as.numeric(age) * 10 -5)
# A1C results
data$A1Cresult <- as.character(data$A1Cresult)
data$A1Cresult[data$A1Cresult == ">7" | data$A1Cresult == ">8"] = "High"
data$A1Cresult <- factor(data$A1Cresult)
# discharge disposition id
data$discharge_disposition_id <- ifelse(data$discharge_disposition_id == 1, "Home", "Other")
data$discharge_disposition_id <- factor(data$discharge_disposition_id)
# Response Dichotomization
data$readmitted <- ifelse(data$readmitted == "NO", "no readmission", "readmission")
# data$readmitted <- as.numeric(data$readmitted != "no readmission")
# data$readmitted <- factor(data$readmitted)
chisq.test(data$readmitted, data$A1Cresult)
# Exploratory data analaysis
library(gridExtra)
library(ggpubr)
mean(ifelse(data$readmitted=="readmission", 1, 0))
sd(ifelse(data$readmitted=="readmission", 1, 0))
plot1 <- as_tibble(data)%>%
ggplot(aes(x=age,fill=readmitted))+geom_histogram(position="dodge",binwidth=5)
plot2 <- as_tibble(data)%>%
ggplot(aes(x=num_procedures,fill=readmitted))+geom_histogram(position="dodge",binwidth=1)
plot3 <- as_tibble(data)%>%
ggplot(aes(x=num_medications,fill=readmitted))+geom_histogram(position="dodge",binwidth=1)
plot4 <- as_tibble(data)%>%
ggplot(aes(x=number_diagnoses,fill=readmitted))+geom_histogram(position="dodge",binwidth=3)
plot5 <- as_tibble(data)%>%
ggplot(aes(x=Length.of.Stay,fill=readmitted))+geom_histogram(position="dodge",binwidth=3)
plot6 <- as_tibble(data)%>%
ggplot(aes(x=num_visits,fill=readmitted))+geom_histogram(position="dodge",binwidth=10)
ggarrange(plot1, plot3, plot2, plot4, plot5,plot6,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 2,
common.legend = TRUE)
group_by(data, race)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, gender)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, discharge_disposition_id )%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, A1Cresult)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, change)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, diabetesMed)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
# Test of independence
chisq.test(data$readmitted, data$race)
chisq.test(data$readmitted, data$gender)
chisq.test(data$readmitted, data$discharge_disposition_id)
chisq.test(data$readmitted, data$A1Cresult)
chisq.test(data$readmitted, data$change)
chisq.test(data$readmitted, data$diabetesMed)
# Exploratory data analaysis
library(gridExtra)
library(ggpubr)
mean(ifelse(data$readmitted=="readmission", 1, 0))
sd(ifelse(data$readmitted=="readmission", 1, 0))
plot1 <- as_tibble(data)%>%
ggplot(aes(x=age,fill=readmitted))+geom_histogram(position="dodge",binwidth=5,aes(y=..density..))
plot2 <- as_tibble(data)%>%
ggplot(aes(x=num_procedures,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot3 <- as_tibble(data)%>%
ggplot(aes(x=num_medications,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot4 <- as_tibble(data)%>%
ggplot(aes(x=number_diagnoses,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot5 <- as_tibble(data)%>%
ggplot(aes(x=Length.of.Stay,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot6 <- as_tibble(data)%>%
ggplot(aes(x=num_visits,fill=readmitted))+geom_histogram(position="dodge",binwidth=10,aes(y=..density..))
ggarrange(plot1, plot3, plot2, plot4, plot5,plot6,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 2,
common.legend = TRUE)
group_by(data, race)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, gender)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, discharge_disposition_id )%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, A1Cresult)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, change)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, diabetesMed)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
# Test of independence
chisq.test(data$readmitted, data$race)
chisq.test(data$readmitted, data$gender)
chisq.test(data$readmitted, data$discharge_disposition_id)
chisq.test(data$readmitted, data$A1Cresult)
chisq.test(data$readmitted, data$change)
chisq.test(data$readmitted, data$diabetesMed)
library(tidyverse)
rm(list = ls())
data <- read.csv("diabetes.csv")
# Keep one record for each patient
data <- data[!duplicated(data["patient_nbr"]),]
# Exclude variables as required
data <- data %>%
dplyr::select(-c(encounter_id,admission_source_id,payer_code,encounter_num))
# Predictor Reconstruction
data <- data %>%
dplyr::select(-c(X, # Index
weight, # Missing too many observations
examide, # monotonic values
citoglipton, # monotonic values
max_glu_serum, # None for most of the data
admission_type_id, # Source type varaible
medical_specialty, # Missing too many observations
))
# Medications, Procedures and Visits
data <- data %>%
mutate(num_medications = rowSums(.[15:35] != "No")) %>%
mutate(num_procedures = num_procedures + num_lab_procedures) %>%
mutate(num_visits = number_inpatient + number_outpatient + number_emergency)
data <- data[-c(15:35)]
data <- data %>%
dplyr::select(-c(num_lab_procedures,
number_inpatient,
number_outpatient,
number_emergency))
# Gender
data <- subset(data, gender != "Unknown/Invalid")
data$gender <- factor(data$gender)
# Race
data$race <- ifelse(data$race == "Caucasian", "Caucasian", "Other")
data$race <- factor(data$race)
data <- data[complete.cases(data$race),]
# Age
data <- data %>%
mutate(age = as.numeric(age) * 10 -5)
# A1C results
data$A1Cresult <- as.character(data$A1Cresult)
data$A1Cresult[data$A1Cresult == ">7" | data$A1Cresult == ">8"] = "High"
data$A1Cresult <- factor(data$A1Cresult)
# discharge disposition id
data$discharge_disposition_id <- ifelse(data$discharge_disposition_id == 1, "Home", "Other")
data$discharge_disposition_id <- factor(data$discharge_disposition_id)
# Response Dichotomization
data$readmitted <- ifelse(data$readmitted == "NO", "no readmission", "readmission")
# Exploratory data analaysis
library(gridExtra)
library(ggpubr)
mean(ifelse(data$readmitted=="readmission", 1, 0))
sd(ifelse(data$readmitted=="readmission", 1, 0))
plot1 <- as_tibble(data)%>%
ggplot(aes(x=age,fill=readmitted))+geom_histogram(position="dodge",binwidth=5,aes(y=..density..))
plot2 <- as_tibble(data)%>%
ggplot(aes(x=num_procedures,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot3 <- as_tibble(data)%>%
ggplot(aes(x=num_medications,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot4 <- as_tibble(data)%>%
ggplot(aes(x=number_diagnoses,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot5 <- as_tibble(data)%>%
ggplot(aes(x=Length.of.Stay,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot6 <- as_tibble(data)%>%
ggplot(aes(x=num_visits,fill=readmitted))+geom_histogram(position="dodge",binwidth=10,aes(y=..density..))
ggarrange(plot1, plot3, plot2, plot4, plot5,plot6,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 2,
common.legend = TRUE)
group_by(data, race)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, gender)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, discharge_disposition_id )%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, A1Cresult)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, change)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, diabetesMed)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
# Test of independence
chisq.test(data$readmitted, data$race)
chisq.test(data$readmitted, data$gender)
chisq.test(data$readmitted, data$discharge_disposition_id)
chisq.test(data$readmitted, data$A1Cresult)
chisq.test(data$readmitted, data$change)
chisq.test(data$readmitted, data$diabetesMed)
set.seed(1003802753)
index <- sample(1:nrow(data), 20000)
train <- data[-index, ]
test <- data[index, ]
train$readmitted <- as.numeric(train$readmitted == "readmission")
test$readmitted <- as.numeric(test$readmitted == "readmission")
# train$age <-log(train$age)
# train$Length.of.Stay <-log(train$Length.of.Stay)
# train$num_procedures <-I(train$num_procedures)^2
# train$num_medications <-I(train$num_medications)^2
# train$number_diagnoses <-log(train$number_diagnoses)
# Model fitting
model <-glm(readmitted~.-patient_nbr,
data = train,
family = binomial)
summary(model)
kable(round(summary(model)$coefficients,4))
set.seed(1003802753)
# AIC
model_AIC <- step(model, trace = 0)
kable(round(summary(model_AIC)$coefficients,4))
# BIC
n <- nrow(train)
model_BIC <- step(model, k=log(n), trace = 0)
kable(round(summary(model_BIC)$coefficients,4))
# Elastic-net
library(glmnet)
x_design <- model.matrix(model)[,-1] # constructs design matrix
cvfit = cv.glmnet(x_design, train$readmitted,
family = "binomial",
type.measure = "class",
alpha = 1)
coef(cvfit, s = "lambda.min")
anova(model_BIC,model_AIC,test='LR')
anova(model_AIC,model,test='LR')
# MULTICOLLINEARITY
car::vif(model_AIC)
# Residual
probabilities <- predict(model_AIC, type = "response")
# Select only numeric predictors
df <- select(train, -c("readmitted", "patient_nbr"))
mydata <- df %>%
dplyr::select_if(is.numeric)
predictors <- colnames(df) # remove patient_nbr
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
library(faraway)
library(pROC)
# plot 1
halfnorm(hatvalues(model_AIC))
# # plot 3 and 4
train <-mutate(train,
residuals=residuals(model),
linpred=predict(model),
predprob=predict(model,type='response'))
gdf <-group_by(train,ntile(linpred,1000))
diagdf<-summarise(gdf,residuals=mean(residuals),linpred=mean(linpred),predprob=mean(predprob))
plot(residuals~linpred,diagdf,xlab='Linear Predictor',ylab='Deviance Residuals',pch=20)
plot(residuals~predprob,diagdf,xlab='Fitted Values',ylab='Deviance Residuals',pch=20)
# model calibration
gdf <-group_by(train,ntile(linpred,100))
hldf<-summarise(gdf,y=sum(readmitted),ppred=mean(predprob),count=n())
hldf<-mutate(hldf,se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hldf,aes(x=ppred,y=y/count,ymin=y/count-2*se.fit,ymax=y/count+2*se.fit))+
geom_point()+geom_linerange(color=grey(0.75))+
geom_abline(intercept=0,slope=1)+
xlab("Predicted Probability")+
ylab("Observed Proportion")
# Hosmer-Lemeshow test
hlstat <-with(hldf,sum((y-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstat,nrow(hldf))
1-pchisq(hlstat,100-2)
# AUC
p <-predict(model_AIC, newdata=test, type="response")
roc_logit <-roc(test$readmitted~p)
TPR <- roc_logit$sensitivities
FPR <- 1-roc_logit$specificities
plot(FPR, TPR,
xlim =c(0,1), ylim =c(0,1),
type ='l', lty = 1, lwd = 2,col ='red', bty = "n")
abline(a = 0, b = 1, lty = 2, col ='blue')
text(0.7,0.4,label =paste("AUC = ",round(auc(roc_logit),2)))
# MULTICOLLINEARITY
vif<-car::vif(model_AIC)
kable(vif,4))
# MULTICOLLINEARITY
vif<-car::vif(model_AIC)
kable(round(vif,4))
# Residual
probabilities <- predict(model_AIC, type = "response")
# Select only numeric predictors
df <- select(train, -c("readmitted", "patient_nbr"))
mydata <- df %>%
dplyr::select_if(is.numeric)
predictors <- colnames(df) # remove patient_nbr
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
rm(list = ls())
data <- read.csv("diabetes.csv")
# Keep one record for each patient
data <- data[!duplicated(data["patient_nbr"]),]
# Exclude variables as required
data <- data %>%
dplyr::select(-c(encounter_id,admission_source_id,payer_code,encounter_num))
# Predictor Reconstruction
data <- data %>%
dplyr::select(-c(X, # Index
weight, # Missing too many observations
examide, # monotonic values
citoglipton, # monotonic values
max_glu_serum, # None for most of the data
admission_type_id, # Source type varaible
medical_specialty, # Missing too many observations
))
# Medications, Procedures and Visits
data <- data %>%
mutate(num_medications = rowSums(.[15:35] != "No")) %>%
mutate(num_procedures = num_procedures + num_lab_procedures) %>%
mutate(num_visits = number_inpatient + number_outpatient + number_emergency)
data <- data[-c(15:35)]
data <- data %>%
dplyr::select(-c(num_lab_procedures,
number_inpatient,
number_outpatient,
number_emergency))
# Gender
data <- subset(data, gender != "Unknown/Invalid")
data$gender <- factor(data$gender)
# Race
data$race <- ifelse(data$race == "Caucasian", "Caucasian", "Other")
data$race <- factor(data$race)
data <- data[complete.cases(data$race),]
# Age
data <- data %>%
mutate(age = as.numeric(age) * 10 -5)
# A1C results
data$A1Cresult <- as.character(data$A1Cresult)
data$A1Cresult[data$A1Cresult == ">7" | data$A1Cresult == ">8"] = "High"
data$A1Cresult <- factor(data$A1Cresult)
# discharge disposition id
data$discharge_disposition_id <- ifelse(data$discharge_disposition_id == 1, "Home", "Other")
data$discharge_disposition_id <- factor(data$discharge_disposition_id)
# Response Dichotomization
data$readmitted <- ifelse(data$readmitted == "NO", "no readmission", "readmission")
# Exploratory data analaysis
library(gridExtra)
library(ggpubr)
mean(ifelse(data$readmitted=="readmission", 1, 0))
sd(ifelse(data$readmitted=="readmission", 1, 0))
plot1 <- as_tibble(data)%>%
ggplot(aes(x=age,fill=readmitted))+geom_histogram(position="dodge",binwidth=5,aes(y=..density..))
plot2 <- as_tibble(data)%>%
ggplot(aes(x=num_procedures,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot3 <- as_tibble(data)%>%
ggplot(aes(x=num_medications,fill=readmitted))+geom_histogram(position="dodge",binwidth=1,aes(y=..density..))
plot4 <- as_tibble(data)%>%
ggplot(aes(x=number_diagnoses,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot5 <- as_tibble(data)%>%
ggplot(aes(x=Length.of.Stay,fill=readmitted))+geom_histogram(position="dodge",binwidth=3,aes(y=..density..))
plot6 <- as_tibble(data)%>%
ggplot(aes(x=num_visits,fill=readmitted))+geom_histogram(position="dodge",binwidth=10,aes(y=..density..))
ggarrange(plot1, plot3, plot2, plot4, plot5,plot6,
labels = c("A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 2,
common.legend = TRUE)
group_by(data, race)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, gender)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, discharge_disposition_id )%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, A1Cresult)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, change)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
group_by(data, diabetesMed)%>%
summarise(count=n(), readmitted=mean(readmitted == "readmission"))
# Test of independence
chisq.test(data$readmitted, data$race)
chisq.test(data$readmitted, data$gender)
chisq.test(data$readmitted, data$discharge_disposition_id)
chisq.test(data$readmitted, data$A1Cresult)
chisq.test(data$readmitted, data$change)
chisq.test(data$readmitted, data$diabetesMed)
set.seed(1003802753)
index <- sample(1:nrow(data), 20000)
train <- data[-index, ]
test <- data[index, ]
train$readmitted <- as.numeric(train$readmitted == "readmission")
test$readmitted <- as.numeric(test$readmitted == "readmission")
# train$age <-log(train$age)
# train$Length.of.Stay <-log(train$Length.of.Stay)
# train$num_procedures <-I(train$num_procedures)^2
# train$num_medications <-I(train$num_medications)^2
# train$number_diagnoses <-log(train$number_diagnoses)
# Model fitting
model <-glm(readmitted~.-patient_nbr,
data = train,
family = binomial)
summary(model)
kable(round(summary(model)$coefficients,4))
set.seed(1003802753)
# AIC
model_AIC <- step(model, trace = 0)
kable(round(summary(model_AIC)$coefficients,4))
# BIC
n <- nrow(train)
model_BIC <- step(model, k=log(n), trace = 0)
kable(round(summary(model_BIC)$coefficients,4))
# Elastic-net
library(glmnet)
x_design <- model.matrix(model)[,-1] # constructs design matrix
cvfit = cv.glmnet(x_design, train$readmitted,
family = "binomial",
type.measure = "class",
alpha = 1)
coef(cvfit, s = "lambda.min")
anova(model_BIC,model_AIC,test='LR')
anova(model_AIC,model,test='LR')
# MULTICOLLINEARITY
vif<-car::vif(model_AIC)
kable(round(vif,4))
# Residual
probabilities <- predict(model_AIC, type = "response")
# Select only numeric predictors
df <- select(train, -c("readmitted", "patient_nbr"))
mydata <- df %>%
dplyr::select_if(is.numeric)
predictors <- colnames(df) # remove patient_nbr
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
library(faraway)
library(pROC)
# plot 1
halfnorm(hatvalues(model_AIC))
# # plot 3 and 4
train <-mutate(train,
residuals=residuals(model),
linpred=predict(model),
predprob=predict(model,type='response'))
gdf <-group_by(train,ntile(linpred,1000))
diagdf<-summarise(gdf,residuals=mean(residuals),linpred=mean(linpred),predprob=mean(predprob))
plot(residuals~linpred,diagdf,xlab='Linear Predictor',ylab='Deviance Residuals',pch=20)
plot(residuals~predprob,diagdf,xlab='Fitted Values',ylab='Deviance Residuals',pch=20)
# model calibration
gdf <-group_by(train,ntile(linpred,100))
hldf<-summarise(gdf,y=sum(readmitted),ppred=mean(predprob),count=n())
hldf<-mutate(hldf,se.fit=sqrt(ppred*(1-ppred)/count))
ggplot(hldf,aes(x=ppred,y=y/count,ymin=y/count-2*se.fit,ymax=y/count+2*se.fit))+
geom_point()+geom_linerange(color=grey(0.75))+
geom_abline(intercept=0,slope=1)+
xlab("Predicted Probability")+
ylab("Observed Proportion")
# Hosmer-Lemeshow test
hlstat <-with(hldf,sum((y-count*ppred)^2/(count*ppred*(1-ppred))))
c(hlstat,nrow(hldf))
1-pchisq(hlstat,100-2)
# AUC
p <-predict(model_AIC, newdata=test, type="response")
roc_logit <-roc(test$readmitted~p)
TPR <- roc_logit$sensitivities
FPR <- 1-roc_logit$specificities
plot(FPR, TPR,
xlim =c(0,1), ylim =c(0,1),
type ='l', lty = 1, lwd = 2,col ='red', bty = "n")
abline(a = 0, b = 1, lty = 2, col ='blue')
text(0.7,0.4,label =paste("AUC = ",round(auc(roc_logit),2)))
